# Desc: Python is a high-level programming language.

# Basic example of server with python
# Will start a Web Server in the current directory on port 8000
# go to http://127.0.0.1:8000

# Interactive mode, starts after script the completed.
python -i script.py

# ipython3 interactive w/ pdb handler
ipython3 -i --pdb main.py

## Simple HTTP server
# Python v2.7
python -m SimpleHTTPServer
# Python 3
python -m http.server 8000

# SMTP-Server for debugging, messages will be discarded, and printed on stdout.
python -m smtpd -n -c DebuggingServer localhost:1025

# Pretty print a json
python -mjson.tool

# Frequently used
if __name__ == "__main__":

# Argparse default vars from Environment
parser = argparse.ArgumentParser(
    description="Here comes the description")
parser.add_argument('--region', help="AWS region",
                    default=os.environ.get('AWS_DEFAULT_REGION', None))
parser.add_argument('--profile', help="AWS profile name",
                    default=os.environ.get('AWS_PROFILE', None))
parser.add_argument('path', help="Path of example file")
args = parser.parse_args()

if not all(hasattr(args, x) for x in ["profile", "region"]):
    args.exit(status=1, message=args.print_usage())

# Union of iterables with no duplicates, as a list
list(set().union(itr1, itr2))

# Exactly one item:
https://more-itertools.readthedocs.io/en/stable/_modules/more_itertools/more.html#one

# Named tuple
```
EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

import csv
for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
    print(emp.name, emp.title)
```

>>> t = [11, 22]
>>> Point._make(t)
Point(x=11, y=22)
